/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

#ifndef _DISPCTRL_SPI_REGS_H_
#define _DISPCTRL_SPI_REGS_H_

// Block name           : dispctrl_spi
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

#define DISPCTRL_SPI_CSR_OFFS 0
#define DISPCTRL_SPI_DISPSIZE_OFFS 4
#define DISPCTRL_SPI_PXFIFO_OFFS 8

/*******************************************************************************
*                                     CSR                                      *
*******************************************************************************/

// Control and status register for the SPI LCD interface

// Field: CSR_PXFIFO_EMPTY  Access: ROV
#define DISPCTRL_SPI_CSR_PXFIFO_EMPTY_LSB  0
#define DISPCTRL_SPI_CSR_PXFIFO_EMPTY_BITS 1
#define DISPCTRL_SPI_CSR_PXFIFO_EMPTY_MASK 0x1
// Field: CSR_PXFIFO_FULL  Access: ROV
#define DISPCTRL_SPI_CSR_PXFIFO_FULL_LSB  1
#define DISPCTRL_SPI_CSR_PXFIFO_FULL_BITS 1
#define DISPCTRL_SPI_CSR_PXFIFO_FULL_MASK 0x2
// Field: CSR_LCD_CS  Access: RW
#define DISPCTRL_SPI_CSR_LCD_CS_LSB  8
#define DISPCTRL_SPI_CSR_LCD_CS_BITS 1
#define DISPCTRL_SPI_CSR_LCD_CS_MASK 0x100
// Field: CSR_LCD_DC  Access: RW
#define DISPCTRL_SPI_CSR_LCD_DC_LSB  9
#define DISPCTRL_SPI_CSR_LCD_DC_BITS 1
#define DISPCTRL_SPI_CSR_LCD_DC_MASK 0x200
// Field: CSR_TX_BUSY  Access: ROV
#define DISPCTRL_SPI_CSR_TX_BUSY_LSB  10
#define DISPCTRL_SPI_CSR_TX_BUSY_BITS 1
#define DISPCTRL_SPI_CSR_TX_BUSY_MASK 0x400
// Field: CSR_LCD_SHIFTCNT  Access: RW
// 1 for 16-bit, 0 for 8-bit
#define DISPCTRL_SPI_CSR_LCD_SHIFTCNT_LSB  16
#define DISPCTRL_SPI_CSR_LCD_SHIFTCNT_BITS 1
#define DISPCTRL_SPI_CSR_LCD_SHIFTCNT_MASK 0x10000
// Field: CSR_DISPTYPE  Access: RO
// Encodes the type of display controller. All RISCBoy display controllers have
// this field. 0x0 means SPI.
#define DISPCTRL_SPI_CSR_DISPTYPE_LSB  28
#define DISPCTRL_SPI_CSR_DISPTYPE_BITS 4
#define DISPCTRL_SPI_CSR_DISPTYPE_MASK 0xf0000000

/*******************************************************************************
*                                   DISPSIZE                                   *
*******************************************************************************/

// Set display dimensions, so the display controller knows when it has reached
// the end of a scanline buffer or frame

// Field: DISPSIZE_W  Access: WO
#define DISPCTRL_SPI_DISPSIZE_W_LSB  0
#define DISPCTRL_SPI_DISPSIZE_W_BITS 9
#define DISPCTRL_SPI_DISPSIZE_W_MASK 0x1ff

/*******************************************************************************
*                                    PXFIFO                                    *
*******************************************************************************/

// Direct write access to the pixel FIFO. Must only be used when the PPU is
// idle.

// Field: PXFIFO  Access: WF
#define DISPCTRL_SPI_PXFIFO_LSB  0
#define DISPCTRL_SPI_PXFIFO_BITS 16
#define DISPCTRL_SPI_PXFIFO_MASK 0xffff

#endif // _DISPCTRL_SPI_REGS_H_
