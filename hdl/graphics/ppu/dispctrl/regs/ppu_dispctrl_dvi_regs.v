/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : dispctrl_dvi
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module dispctrl_dvi_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg  csr_en_o
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'h0;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_CSR = 0;

wire __csr_wen = wen && addr == ADDR_CSR;
wire __csr_ren = ren && addr == ADDR_CSR;

wire  csr_en_wdata = wdata[0];
wire  csr_en_rdata;
wire [3:0] csr_disptype_wdata = wdata[31:28];
wire [3:0] csr_disptype_rdata;
wire [31:0] __csr_rdata = {csr_disptype_rdata, 27'h0, csr_en_rdata};
assign csr_en_rdata = csr_en_o;
assign csr_disptype_rdata = 4'h1;

always @ (*) begin
	case (addr)
		ADDR_CSR: rdata = __csr_rdata;
		default: rdata = 32'h0;
	endcase
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		csr_en_o <= 1'h0;
	end else begin
		if (__csr_wen)
			csr_en_o <= csr_en_wdata;
	end
end

endmodule
