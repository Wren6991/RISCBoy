# Component TBs
ahb_sync_sram
ahb_async_sram
ahb_async_sram_halfwidth
ahb_cache_readonly
ahbl_splitter
ahbl_arbiter
ahbl_crossbar
sync_fifo
async_fifo
hazard5_muldiv_seq
ppu_pixel_gearbox
ppu_background
ppu2/affine_coord_gen

# CPU litmus tests
execution/fibonacci
execution/branch
execution/loadstore
execution/factorial
execution/gcd
execution/quick_brown_fox

# RV32I tests

execution/riscv_compliance TEST=I-ADD-01
execution/riscv_compliance TEST=I-ADDI-01
execution/riscv_compliance TEST=I-AND-01
execution/riscv_compliance TEST=I-ANDI-01
execution/riscv_compliance TEST=I-AUIPC-01
execution/riscv_compliance TEST=I-BEQ-01
execution/riscv_compliance TEST=I-BGE-01
execution/riscv_compliance TEST=I-BGEU-01
execution/riscv_compliance TEST=I-BLT-01
execution/riscv_compliance TEST=I-BLTU-01
execution/riscv_compliance TEST=I-BNE-01

execution/riscv_compliance TEST=I-CSRRC-01
execution/riscv_compliance TEST=I-CSRRCI-01
execution/riscv_compliance TEST=I-CSRRS-01
execution/riscv_compliance TEST=I-CSRRSI-01
execution/riscv_compliance TEST=I-CSRRW-01
execution/riscv_compliance TEST=I-CSRRWI-01

execution/riscv_compliance TEST=I-DELAY_SLOTS-01

# Likewise, there is currently no expectation that these should work
#execution/riscv_compliance TEST=I-EBREAK-01
#execution/riscv_compliance TEST=I-ECALL-01

execution/riscv_compliance TEST=I-ENDIANESS-01
execution/riscv_compliance TEST=I-FENCE.I-01 MARCH=rv32i

execution/riscv_compliance TEST=I-IO
execution/riscv_compliance TEST=I-JAL-01
execution/riscv_compliance TEST=I-JALR-01
execution/riscv_compliance TEST=I-LB-01
execution/riscv_compliance TEST=I-LBU-01
execution/riscv_compliance TEST=I-LH-01
execution/riscv_compliance TEST=I-LHU-01
execution/riscv_compliance TEST=I-LUI-01
execution/riscv_compliance TEST=I-LW-01

# Leave this one out for now. Unlike RV32I, we do support
# halfword-aligned jumps (there is no particular RV32IC test suite.)
#execution/riscv_compliance TEST=I-MISALIGN_JMP-01

# Need trap to support this one, leave it out for now
#execution/riscv_compliance TEST=I-MISALIGN_LDST-01

# Assemble without compressed instructions
# because it uses PC difference to measure cycle count.
execution/riscv_compliance TEST=I-NOP-01 MARCH=rv32i

execution/riscv_compliance TEST=I-OR-01
execution/riscv_compliance TEST=I-ORI-01
execution/riscv_compliance TEST=I-RF_size-01
execution/riscv_compliance TEST=I-RF_width-01
execution/riscv_compliance TEST=I-RF_x0-01
execution/riscv_compliance TEST=I-SB-01
execution/riscv_compliance TEST=I-SH-01
execution/riscv_compliance TEST=I-SLL-01
execution/riscv_compliance TEST=I-SLLI-01
execution/riscv_compliance TEST=I-SLT-01
execution/riscv_compliance TEST=I-SLTI-01
execution/riscv_compliance TEST=I-SLTIU-01
execution/riscv_compliance TEST=I-SLTU-01
execution/riscv_compliance TEST=I-SRA-01
execution/riscv_compliance TEST=I-SRAI-01
execution/riscv_compliance TEST=I-SRL-01
execution/riscv_compliance TEST=I-SRLI-01
execution/riscv_compliance TEST=I-SUB-01
execution/riscv_compliance TEST=I-SW-01
execution/riscv_compliance TEST=I-XOR-01
execution/riscv_compliance TEST=I-XORI-01

# RV32IMC tests (don't actually use M extension)

execution/riscv_compliance ARCH=rv32imc TEST=C-ADDI16SP
execution/riscv_compliance ARCH=rv32imc TEST=C-ADDI4SPN
execution/riscv_compliance ARCH=rv32imc TEST=C-ADDI
execution/riscv_compliance ARCH=rv32imc TEST=C-ADD
execution/riscv_compliance ARCH=rv32imc TEST=C-ANDI
execution/riscv_compliance ARCH=rv32imc TEST=C-AND
execution/riscv_compliance ARCH=rv32imc TEST=C-BEQZ
execution/riscv_compliance ARCH=rv32imc TEST=C-BNEZ
execution/riscv_compliance ARCH=rv32imc TEST=C-JALR
execution/riscv_compliance ARCH=rv32imc TEST=C-JAL
execution/riscv_compliance ARCH=rv32imc TEST=C-JR
execution/riscv_compliance ARCH=rv32imc TEST=C-J
execution/riscv_compliance ARCH=rv32imc TEST=C-LI
execution/riscv_compliance ARCH=rv32imc TEST=C-LUI
execution/riscv_compliance ARCH=rv32imc TEST=C-LW
execution/riscv_compliance ARCH=rv32imc TEST=C-LWSP
execution/riscv_compliance ARCH=rv32imc TEST=C-MV
execution/riscv_compliance ARCH=rv32imc TEST=C-OR
execution/riscv_compliance ARCH=rv32imc TEST=C-SLLI
execution/riscv_compliance ARCH=rv32imc TEST=C-SRAI
execution/riscv_compliance ARCH=rv32imc TEST=C-SRLI
execution/riscv_compliance ARCH=rv32imc TEST=C-SUB
execution/riscv_compliance ARCH=rv32imc TEST=C-SW
execution/riscv_compliance ARCH=rv32imc TEST=C-SWSP
execution/riscv_compliance ARCH=rv32imc TEST=C-XOR

# RV32IM tests (*do* use M extension)

execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=DIV
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=DIVU
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=REM
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=REMU
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=MUL
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=MULH
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=MULHU
execution/riscv_compliance ARCH=rv32im MARCH=rv32imc TEST=MULHSU


# System-level software tests

system TEST=helloworld
system TEST=fib_recursive
system TEST=gcd
system TEST=float_tiny
system TEST=uart_tx
system TEST=uart_loopback
system TEST=spi_smoke
#system TEST=memtest_basic # FIXME can't run this now that we execute code from the memory it tests!
#system TEST=gpio   # We don't have much GPIO to speak of any more :)
system TEST=test_ecall
system TEST=uart_loopback_irq
system TEST=irq_priority
system TEST=irq_early_clear
system TEST=handle_misaligned_loadstore
system TEST=printf_int
